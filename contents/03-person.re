= コンピュータを創った人々

//abstract{
数多くの科学者や技術者の貢献により、今日の情報社会が築かれました。ウィキペディアより引用・要約する形で、24人の方々の業績をご紹介いたします。
//}

//sideimage[Neumann][30mm][sep=5mm]{
@<B>{ジョン・フォン・ノイマン}
@<br>{}
ハンガリー出身の数学者。ほとんどのコンピュータの動作原理であるプログラム内蔵方式を考案した。原子爆弾（マンハッタン計画）や黎明期の電子計算機ENIAC(エニアック）の開発でも有名である。
ゲーム理論(複数人の意思決定を数学的に研究する学問)の成立に貢献した。企業経営や軍事戦略理論や、将棋やチェスなどの零和ゲームの戦略など、社会に大きな影響を与えた。
//}
//vspace[latex][7mm]

//sideimage[Shannon][30mm][sep=5mm]{
@<B>{クロード・シャノン}
@<br>{}
米国の電気工学者、数学者。
情報、通信、暗号、データ圧縮、符号化など今日の情報社会に欠かせない分野を研究し、「情報理論の父」と呼ばれている。マサチューセッツ工科大学で論文を書き、電気回路・電子回路が論理演算に対応することを示した。
#@# つまり、スイッチのオン・オフを真理値に対応させると、スイッチの直列接続はANDに、並列接続はORに対応すること、論理演算がスイッチング回路で実行できることを示しました。
これにより、デジタル回路・論理回路の概念が確立され、コンピュータの実現に向け、とても大きな一歩となった。情報量の単位「ビット」もシャノンの貢献である。
//}
//vspace[latex][7mm]

//sideimage[Turing][30mm][sep=5mm]{
@<B>{アラン・チューリング}
@<br>{}
イギリスの数学者、論理学者、暗号解読者、計算機科学者。「チャーチ=チューリングのテーゼ(提唱)」と計算可能性理論への貢献で広く知られている。アルゴリズム(算法)を実行する機械を形式的に記述した「チューリングマシン」にその名を残す。また「停止性問題の決定不能性」（無限の計算能力を持つコンピュータでも、解けない問題がある）を示した。また、エニグマの暗号解読への貢献や、チューリングテスト、コンピュータチェス、さらに実際面でもコンピュータの誕生に重要な役割を果たし、計算機科学、人工知能の父とも言われている。
//}
//vspace[latex][7mm]

//sideimage[George_Boole][35mm][sep=5mm]{
@<B>{ジョージ・ブール}
@<br>{}
イギリスの数学者・哲学者。今日のコンピュータ科学の分野の基礎的な理論であるブール代数を確立した。組み合わせ回路（論理回路）はブール代数で表現できる。0 と 1 を電圧の高低に対応させると、デジタル回路の入力と出力をブール論理の式で表現することができる。
これにより、ANDゲート、ORゲート、NOTゲートのような基本論理回路や、NANDゲート、NORゲート、XORゲートなどを組み合わせてデジタル回路を構成することができる。
//}
//vspace[latex][7mm]

//sideimage[NiklausWirth][35mm][sep=5mm]{
@<B>{ニクラウス・ヴィルト}
@<br>{}
スイスの計算機科学者。プログラミング言語Pascal、Modula-2などの開発や、ソフトウェア工学分野の開拓的研究で知られる。
ヴィルトは、プログラミング言語ALGOL W、Pascal、Modula、Modula-2やオペレーティングシステムOberonの開発などの功績により、ヴィルトは1984年にチューリング賞を受賞した。
プログラミングの教育法について書いた記事Program Development by Stepwise Refinementは、ソフトウェア工学の分野における古典である。1975年の著作『アルゴリズム＋データ構造＝プログラム』は広く知られ、今なお価値を失っていない。同書では、コンパイラ設計の説明のために、単純なプログラミング言語PL/0を設計。様々な大学のコンパイラ設計の授業で利用された。
//}
#663399
//sideimage[don][35mm][sep=5mm]{
@<B>{ドナルド・クヌース}
@<br>{}
アメリカ合衆国の数学者、計算機科学者。スタンフォード大学名誉教授。クヌースによるアルゴリズムに関する著作 The Art of Computer Programming は有名である。アルゴリズム解析と呼ばれる分野を開拓し、計算理論の発展に多大な貢献をしている。その過程で漸近記法(ランダウ記法, O-記法)で計算量を表すことを一般化させた。
#@# クヌースの計算機科学への貢献に敬意を表し、1990年、彼は「プログラミング技法の教授; Professor of the Art of Computer Programming」という唯一の称号を与えられた。

計算機科学への貢献に加え、コンピュータによる組版システム TeX とフォント設計システム METAFONT の開発者でもあり、Computer Modern という書体ファミリも開発した。
#@# 作家であり学者であるクヌースは、文芸的プログラミングのコンセプトを生み出した。
//}
//vspace[latex][7mm]

//sideimage[Brian_Kernighan][35mm][sep=5mm]{
@<B>{ブライアン・カーニハン}
@<br>{}
ブライアン・カーニハンは、ベル研究所に在籍していたカナダ出身の計算機科学者である。C言語やUNIXの開発者であるデニス・リッチー、ケン・トンプソンと共に、C言語およびUNIXに対する多くの研究開発結果による貢献で知られている。

デニス・リッチーと共著の『プログラミング言語C』(通称：K&R) は、事実上の規格書として扱われ、現在でも古典的な教科書の一つである。

多くのプログラミング言語入門書で、最初のプログラムとして書かれる @<code>{Hello world} は、彼がベル研究所で書いたB言語のチュートリアルで初めて使われた。
//}

//vspace[latex][7mm]

//sideimage[Dennis_Ritchie][35mm][sep=5mm]{
@<B>{デニス・リッチー}
@<br>{}
アメリカ合衆国の計算機科学者。同僚のケン・トンプソンと共に、ベル研究所で独自のオペレーティングシステム UNIX を作り始める。このUNIX上で動作するアプリケーション作成の為に、トンプソンによってB言語が開発され、リッチーがこれにデータ型と新しい文法等を追加しC言語が出来、アセンブリ言語で書かれていたUNIXをC言語で書き換えることに成功した。C言語の開発は、リッチーのUNIXへの最大の貢献である。

UNIX開発の功績により、ケン・トンプソンと共にチューリング賞を受賞している。今日、C言語は組込システムからスーパーコンピュータまであらゆるプラットフォームで用いられ、彼の業績は偉大である。
//}

//vspace[latex][7mm]

//sideimage[Ken_Thompson][35mm][sep=5mm]{
@<B>{ケン・トンプソン}
@<br>{}
  ケン・トンプソンは、アメリカ合衆国の計算機科学者。長年ベル研究所に勤め、オリジナルのUnixを開発した。またC言語の前身であるB言語を開発した。2006年からGoogleで勤務しており、Goを共同開発した。
他の主な業績として、正規表現、テキストエディタQEDとed、UTF-8コードの定義に加え、チェスの終盤定跡データベースやチェスマシンBelleの開発などコンピュータチェスへの貢献がある。1983年に彼の長年の同僚であるデニス・リッチーと共にチューリング賞を受賞した。「信用を信頼することについての考察」は、トンプソンハックとして知られる、セキュリティに関する重要な研究成果である。
//}

//vspace[latex][7mm]
//sideimage[Jacob_Ziv][35mm][sep=5mm]{
@<B>{ジェイコブ・ジヴ}@<br>{}
ジェイコブ・ジヴは、イスラエルの電気工学者である。エイブラハム・レンペルと共に可逆データ圧縮アルゴリズムであるLZ77・LZ78の開発者として知られる。

ジヴの研究分野はデータ圧縮・情報理論・統計的通信理論であり、イスラエル最高の栄誉である「イスラエル賞」受賞の他、「情報理論への貢献とデータ圧縮の理論と実践」についてIEEEリチャード・ハミングメダルを、IEEE情報理論ソサイエティよりクロード・E・シャノン賞などを受賞した。
//}

//vspace[latex][7mm]
//sideimage[Arthur_Samuel][35mm][sep=5mm]{
@<B>{アーサー・サミュエル}@<br>{}
アーサー・リー・サミュエルはアメリカの計算機科学者で、コンピュータゲームと人工知能の分野で主に知られている。

コンピュータによる一般問題への適切な戦術を開発するにはゲームを学習させるのが非常に有益だと考え、単純だが奥が深いチェッカーを選択、世界初の学習型コンピュータ・チェッカーの開発を行った。現在状態から到達可能な盤面の探索木を構成し、アルファ・ベータ法と呼ばれる技法での枝刈りや任意の盤面を評価する関数を開発、研究後期には腕の立つアマチュアと互角に戦えるレベルとなった。

人工知能 (AI) の基本的概念をいち早く世界に示し、機械学習も彼の造語である。
//}

//vspace[latex][7mm]
//sideimage[Alan_Kay][35mm][sep=5mm]{
@<B>{アラン・ケイ}@<br>{}
アラン・カーティス・ケイは、アメリカ合衆国の計算機科学者。主にオブジェクト指向プログラミングとユーザインタフェース設計に関する初期の功績で知られている。

マイクロコンピュータ以前の時代に、個人の活動を支援する「パーソナルコンピュータ」という概念を提唱した。高価で大きく複数人で「共有」するのが当たり前だったコンピュータに「個人向け」という利用状況を想定し、それに相応しいコンピュータ環境がどうあるべきかを考えた人物である。自らがそう名付けた「ダイナブック構想」の提唱者であり、「コンピュータ・リテラシー」という言葉の発明者でもある。
//}

//vspace[latex][7mm]
//sideimage[David_Deutsch][35mm][sep=5mm]{
@<B>{デイヴィッド・ドイッチュ}@<br>{}
デイヴィッド・ドイッチュは、イギリスの物理学者である。量子チューリングマシンの記述や、量子コンピュータ上で動作するように設計されたアルゴリズムを規定し、量子計算の分野を開拓した。
#@# また、量子鍵配布にもつれ状態やベルの定理を用いることを提案し、量子力学の多世界解釈の支持者でもある。

#@# ドイッチュ・ジョサのアルゴリズムは、最も早期に発見された、既存のどの決定論的古典アルゴリズムよりも指数関数的に速い量子アルゴリズムとして知られる。

「量子計算理論の基礎を築き、その後、最初の量子アルゴリズムの発見、量子論理ゲートと量子計算ネットワークの理論、最初の量子エラー訂正スキーム、いくつかの基本的な量子普遍性の結果など、この分野で最も重要な進歩の多くを作り、またはそれに参加してきた。」貢献から、王立協会(FRS)のフェローに選ばれている。
//}






//vspace[latex][7mm]
//sideimage[Linus_Torvalds][35mm][sep=5mm]{
@<B>{リーナス・トーバルズ}@<br>{}
リーナス・ベネディクト・トーバルズは、フィンランド出身の米国プログラマ。@<ruby>{Linux,リナックス}カーネルを開発し、公開した。

アンドリュー・タネンバウムが開発したカーネルとオペレーティングシステム (OS) であるMINIXに刺激を受け、自宅のパーソナルコンピュータ上で動作可能なUNIX OSの必要性を感じ、自分の趣味の時間と自宅の設備でLinuxカーネルの初期の開発を行った。

また、Linuxカーネルのソースコードなどの変更履歴を記録・追跡するための分散型バージョン管理システム @<ruby>{Git,ギット} も開発、ほかの多くのプロジェクトでも事実上の標準として広く用いられている。
//}

//vspace[latex][7mm]
//sideimage[Tim_Berners-Lee][35mm][sep=5mm]{
@<B>{ティム・バーナーズ＝リー}@<br>{}
ティム・バーナーズ＝リーは、イギリスの計算機科学者。ロバート・カイリューとともにWorld Wide Web（WWW）を考案し、ハイパーテキストシステムを実装・開発した人物である。またURL、HTTP、HTML の最初の設計は彼によるものである。

スイス・ジュネーヴの欧州原子核研究機構（CERN）にて、世界最初のウェブサイト http://info.cern.ch/ を公開する。

マサチューセッツ工科大学に着任した後、World Wide Web Consortium(W3C)を設立。WWWの仕様や指針、標準技術を策定・開発に関わっている。
//}

//vspace[latex][7mm]
//sideimage[Hakon_Wium_Lie][35mm][sep=5mm]{
@<B>{ホーコン・ウィウム・リー}@<br>{}
ホーコン・ウィウム・リーは、ノルウェーのオペラ・ソフトウェアの最高技術責任者である。

WWW 生誕の地である CERN にて、Cascading Style Sheets (CSS) の概念を初めて提唱した。
W3C にも参画、ウェブブラウザのレンダリングエンジンが W3C の勧告を適切に準拠しているかを検証する Acid2 テストを提唱した。

その後も、ウェブフォントやビデオ要素の提言や、Operaでのモバイルブラウザの開発などに貢献した。
//}

//vspace[latex][7mm]
//sideimage[eric_meyer][35mm][sep=5mm]{
@<B>{エリック・メイヤー}@<br>{}
エリック・メイヤーは、アメリカのウェブデザインコンサルタントであり、作家である。ウェブ標準を支持する活動で最もよく知られており、特にHTMLの表示方法を管理する技術であるCSS（Cascading Style Sheets）について多くの本や記事を書き、その使用を促進するために多くのプレゼンテーションを行っている。

次女のレベッカが6歳で亡くなった際には、彼女の思い出として、@<code>{#663399} は「@<code>{rebeccapurple}」と名付けられ CSS Colorsリストに加えられた。
//}

//vspace[latex][7mm]
//sideimage[Brendan_Eich][35mm][sep=5mm]{
@<B>{ブレンダン・アイク}@<br>{}
ブレンダン・アイクはアメリカ合衆国のプログラマであり、プログラミング言語 JavaScript の生みの親である。

主に Netscape と Mozilla での業績で知られ、ネットスケープコミュニケーションズで、ウェブブラウザ Netscape Navigator 向けのJavaScript開発に携わった。

Mozilla Corporation で最高技術責任者に就任、十年以上に渡り活動した後、Brave Softwareを設立、新ブラウザ Braveの開発を行っている。
//}

//vspace[latex][7mm]
//sideimage[DHH][35mm][sep=5mm]{
@<B>{デイヴィッド・ハイネマイヤー・ハンソン}@<br>{}
デイヴィッド・ハイネマイヤー・ハンソンは、デンマーク出身のプログラマ。ウェブアプリケーションフレームワーク「Ruby on Rails」の作者であり、Basecampの創設者、最高技術責任者でもある。通称として「DHH」と表記されることが多い。

カーレーサーとしてもル・マン24時間レースでは、アマクラスで優勝を果たし、国債自動車連盟世界耐久選手権（WEC）でもドライバーズチャンピオンに輝くなど実績は一級である。
//}

//vspace[latex][7mm]
//sideimage[wadaeiichi][35mm][sep=5mm]{
@<B>{和田 英一}@<br>{}
和田 英一は、日本のコンピュータ科学者。
東京大学理学部物理学科・高橋秀俊教授の研究室で開発されていたパラメトロンコンピュータにおいて、プログラム本体の一部と変換テーブルを兼用するなどしてサイズ圧縮したことは、「日本初のハッカー作品」と称される。@<xsmall>{(@<href>{https://onl.bz/7RcpYa7,ASCII.jp}に特集。写真出典も同じ。)}

マサチューセッツ工科大学の准教授を務め、コンピュータ科学の専門過程への入門的教科書「計算機プログラムの構造と解釈」を翻訳する。

日本におけるインターネットの発展をその創世記から見守り、電子メールで日本語を取り扱う為の
JUNET漢字コードの解説文書を書き、普及させた。また、大学院生の田中哲朗らにより開発されたいわゆる「和田研フォント」や「鍵盤配列にも大いなる関心を」がきっかけとなり開発された「Happy Hacking Keyboard」シリーズでも知られる。
//}

//vspace[latex][7mm]
//sideimage[sakamura_ken][35mm][sep=5mm]{
@<B>{坂村 健}@<br>{}
坂村 健は、日本のコンピュータ科学者。自ら提唱したTRONプロジェクトにてリーダーとして多種多様な仕様を策定した。

マイクロコントローラによる組込みシステムにより身の回りのあらゆるものがインテリジェントになり、またネットワーク化されるヴィジョンからTRONプロジェクト(The Realtime Operating system Nucleus)を開始。住宅、乗用車から家電に至るまで、組み込み機器用の標準OSとして広く利用されている。

平成十五年には、紫綬褒章を受章。平成二十五年には国際電気通信連合150周年賞を受賞している。

東京大学名誉教授、東洋大学情報連携学部学部長、日本電信電話会社社外取締役@<xsmall>{(顔写真は同社ウェブサイトより)}でもある。
//}

//vspace[latex][7mm]
//sideimage[okumuraharuhiko][35mm][sep=5mm]{
@<B>{奥村 晴彦}@<br>{}
奥村 晴彦は、日本の計算機科学者。学生時代から「月刊マイコン」に投稿するなど、若いころから既に知られた存在であった。日本におけるTeXの第一人者であり、その普及に尽力している。また、圧縮アルゴリズム「LZARI法(後のLZA)」を開発したことで知られている。

プラズマ・核融合学会の電子化グループに参画、学会のソフトウェア構造設計、事務処理作業や英文電子ジャーナル編集作業のオンライン化に取り組んだ業績から、同学会貢献賞を受賞した。
//}

//vspace[latex][7mm]
//sideimage[Murai_Jun][35mm][sep=5mm]{
@<B>{村井 純}@<br>{}
村井 純は、日本の計算機科学者で、専門は情報工学（コンピュータネットワーク）。

日本におけるインターネット黎明期からインターネットの技術基盤作り、運用、啓蒙活動等に関わり続けている。「日本のインターネットの父」とされ、広域ネットワーク上で日本語を使えるようにすることにも尽力し、UNIXやC言語を国際化する動きと連携をとりながら、英語中心だった初期のインターネットを多言語対応へと導いた。

東南アジアの研究教育ネットワークの開発、発展にも尽力し、東南アジア各国のインターネットを牽引する研究運用人材を多数輩出している。
//}

//vspace[latex][7mm]
//sideimage[Matz][35mm][sep=5mm]{
@<B>{まつもとゆきひろ}@<br>{}
まつもと ゆきひろは、日本のソフトウェア技術者。株式会社ネットワーク応用通信研究所フェロー、Rubyアソシエーション理事長、松江市名誉市民。通称はMatz。

プログラミング言語「Ruby」の開発者。効率的に記述できるプログラム言語の実現を目指し、平成5年から開発を始め、平成7年にオブジェクト指向スクリプト言語Rubyを公開した。
Rubyを用いて「Hello, world!」という文字列を出力するために半年を要して苦労したが、「Ruby言語の開発で飽きたり、辛く感じたりすることはなかった」と語っている。

平成9年から松江市に在住し、同市のネットワーク応用通信研究所 (NaCl) にフェローとして勤務している。
//}
//vspace[latex][2mm]
Rubyの普及を目的として設立された一般財団法人「Rubyアソシエーション」の理事長も務める。

平成24年、内閣府から「世界で活躍し『日本』を発信する日本人」の一人に選ばれた。@<fn>{matz}

//footnote[matz][@<href>{https://logmi.jp/tech/articles/325269, 小さな目標を立て続けたからこそRubyはできた まつもとゆきひろ氏が語る、「言語を作りたい」気持ちからの道程}]

//blankline

===[column] 名前重要

//flushright{
@<B>{　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　著者: Matz　}
//}

ネイテイブ・アメリカンの信仰に「すべての人物・事物には真の名前があり、その名前を知るものはそれを支配することができる」というものがあるのだそうです。ですから、彼らは自分の真の名前を秘密にして、家族など本当に信頼できる人にしか打ち明けないのだそうです。そして、対外的にはあだ名を用意してそちらを使うということです。そういえばアニメ化もされたU・K・ル=グウィンの「ゲド戦記」でも同じ設定が用いられていましたね。「ゲド」というのは主人公の真の名前なので物語中にほとんど登場せず、物語の中では彼は一貫して「ハイタカ」と呼ばれていました。
//vspace[latex][3mm]
さて、プログラミングの世界において、この信仰はある程度真実ではないかと感じることがたびたびあります。つまり、事物の名前には、理屈では説明しきれない不思議なパワーがあるような気がするのです。
//vspace[latex][3mm]
たとえば、私が開発しているRubyも、名前のパワーを体現しているように思えます。1993年にRubyの開発を始めた時、Perlにあやかって宝石の名前を選んでRubyと命名しました。あまり深刻に考えず、宝石の名前の中から、短く、覚えやすく、美しい名前としてRubyを選んだだけでしたが、後にRubyが、6月の誕生石である真珠(パール)に続く、7月の誕生石であることに気がついた時、まさに適切な名前であると感じました。また、活字もそれぞれの大きさに応じて宝石の名前が付けられているのですが、パールは5ポイント、ルビーは5.5ポイントで並んでいます。このルビーがふりがなの「ルビ」の語源になったのはまた別の話。
//vspace[latex][3mm]
今、振り返って思うのは、もし私がRubyという名前を選ばなかったらきっと、現在のRubyの普及を見ることはなかっただろうということです。このRubyという名前にパワーがあったからこそ、Rubyの魅力が増加したのではないかと感じるのです。ただ単にRubyがプログラミング言語として優れているだけでなく、この名前の持つパワーによって、愛される存在となっているのではないかと感じるのです。この名前があればこそ、これまでの長い間Rubyを開発し続けるモチベーションが維持できたし、また多くのユーザがRubyという言語に関心をもってくださったのではないかと感じています。
//vspace[latex][3mm]
そんなこともあって、私の設計上の座右の銘は「名前重要」です。あらゆる機能をデザインする時に、私はその名前にもっともこだわります。プログラマとしてのキャリアの中で、適切な名前をつけることができた機能は成功し、そうでない機能については後で後悔することが多かったように思うからです。
//vspace[latex][3mm]
実際、Rubyに対する機能追加の要求に対しても、しばしば「要求は分かった。あれば便利なのも理解できる。でも、名前が気に入らない。良い名前が決まったら採用する」として拒否したものも数限りなくあります。しかし、名前が気に入らなかったもので、取り入れなかったことを後で後悔したことはほとんどありません。
//vspace[latex][3mm]
これはつまりこういうことなのではないかと思います。適切な名前をつけられると言うことは、その機能が正しく理解されて、設計されているということで、逆にふさわしい名前がつけられないということは、その機能が果たすべき役割を設計者自身も十分理解できていないということなのではないでしょうか。個人的には適切な名前をつけることができた機能については、その設計の8割が完成したと考えても言い過ぎでないことが多いように思います。
//vspace[latex][3mm]
ソフトウェアの設計のアプローチとして、「まず名前から入る」というのは、あまり語られていない秘訣としてもっと広く知られてもよいように思います。 @<fn>{programmer97}

//footnote[programmer97][@<href>{https://プログラマが知るべき97のこと.com}より引用]

===[/column]


#@# //sideimage[ruby][30mm][sep=5mm,side=R]{
